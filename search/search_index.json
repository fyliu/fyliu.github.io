{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"git/","title":"git","text":""},{"location":"git/#working-on-code","title":"working on code","text":"<p>see changed files</p> <pre><code>git st\n</code></pre> <p>commit changed files</p> <pre><code>git ci -a -m\"docs: export requirements file\"\n</code></pre> <p>amend last commit with staged changes</p> <pre><code>git amend -a\ngit amend -a -m\"docs: useful git commands\"\n</code></pre> <p>add untracked file to git</p> <pre><code>git add docs/git.md\n</code></pre>"},{"location":"guides-ideas/","title":"Guides ideas","text":""},{"location":"guides-ideas/#needed-guides","title":"Needed guides","text":"<ul> <li> setup ssh config, ssh public key, etc</li> <li> x forwarding through ssh session</li> <li> remote desktop into linux, xrdp setup</li> <li> PR keeping linear history by not merging branches, rebase instead</li> </ul>"},{"location":"guides-ideas/#todo","title":"ToDo","text":"<ul> <li> set up mkdocs repo</li> <li> add tilde pymdown extension for strikethrough text: https://yakworks.github.io/docmark/extensions/pymdown/ https://squidfunk.github.io/mkdocs-material/reference/formatting/</li> <li> docker file for mkdocs project</li> <li> local development using docker to run mkdocs</li> <li>https://squidfunk.github.io/mkdocs-material/publishing-your-site/#material-for-mkdocs_1</li> <li> github workflow to build gh-pages docs</li> <li> git diagram example</li> <li> multi repo mkdocs with CTJ and Website Wiki</li> <li>Fang: it doesn't work correctly. All the links are broken. It imports the nav from the remote repos and converts the links to /, but the imported docs are stores in /docs/ <li>https://github.com/jdoiro3/mkdocs-multirepo-plugin</li> <li>HfLA Website Docs: '!import https://hackforla.github.io/CivicTechJobs/?branch=main'</li> <li>HfLA Website Docs: '!import https://github.com/hackforla/website-wiki?branch=main'</li> <li>material theme, mkdocs documentation</li> <li>https://github.com/squidfunk/mkdocs-material</li> <li> build and upload docker image to dockerhub and use that image for development</li> <li>https://github.com/squidfunk/mkdocs-material/blob/master/.github/workflows/build.yml</li> <li> try docker image on website-wiki to see if it works.</li>"},{"location":"mkdocs/","title":"Mkdocs","text":""},{"location":"mkdocs/#introduction","title":"Introduction","text":""},{"location":"mkdocs/#what-is-it","title":"What is it","text":"<p>Mkdocs is a documentation generator for projects, which converts markdown to html.</p>"},{"location":"mkdocs/#why-we-use-it","title":"Why we use it","text":"<p>It creates documentation that's pleasing to read and easy to maintain.</p> Here's a list of features we use Dead link checker <p>Github wiki doesn't check for broken links.</p> Search function <p>Github wiki is not searcheable.</p> Tabbed blocks LinuxMac <p>linux-specific content</p> <p>mac-specific content</p> Site table of contents <p>See the contents of the site in the left sidebar.</p> Per-page table of contents <p>See the contents of the current page in the right sidebar.</p> Code and text annotations <pre><code>Click the plus sign --&gt; # (1)!\n</code></pre> <ol> <li>This is an explanation text</li> </ol> Expandable text blocks <p>That's what this box is!</p>"},{"location":"mkdocs/#hackforla-project-template","title":"Hackforla project template","text":"Todo <ul> <li> how to extend to install other plugins in ci.yml and Dockerfile</li> <li> multirepo plugin</li> <li> optimize Dockerfile</li> <li> [people depot] auto merge docs branch with gh-actions</li> </ul>"},{"location":"mkdocs/#components","title":"Components","text":"<ol> <li>Starter docs to guide the creation of new pages.</li> <li>Github workflow setup to auto-deploy the documentation.</li> <li>Docker setup to run mkdocs without having to install it locally</li> </ol>"},{"location":"mkdocs/#usage","title":"Usage","text":"New projectExisting project <p>When we create a new project from the template, mkdocs should already be usable. The github workflow will run automatically and create a github pages site at <code>http://hackforla.github.io/&lt;project name&gt;</code></p> <ol> <li>Click on Use this template</li> <li>\"Create a new repository\"</li> <li>Be sure to set these options:<ol> <li>Select \"Public\" repo type, which allows gh-pages to work for non-paying repos.</li> <li>Check the \"Include all branches\" box, which copies the gh-pages branch which holds the generated html pages.</li> </ol> </li> </ol> <p>To add mkdocs to existing repos. You'll need to copy these files into your project</p> <pre><code>.github/workflows/ci.yml\ndocker-compose.mkdocs.yml\n</code></pre> <p>You'll also need to create a new mkdocs project</p> <ol> <li>Use the docker image to create the new project</li> </ol> <pre><code>docker-compose -f docker-compose.mkdocs.yml run mkdocs mkdocs new . # (1)!\n</code></pre> <ol> <li>docker-compose run executes a command from a new docker image container. In this case, inside the mkdocs container, execute <code>mkdocs new .</code> (note the period for the current directory).</li> </ol>"},{"location":"mkdocs/#working-on-docs-locally","title":"Working on docs locally","text":"<ol> <li> <p>Run the mkdocs server from the container</p> <pre><code>docker-compose -f docker-compse.mkdocs.yml up\n</code></pre> </li> <li> <p>Open a browser to <code>http://localhost:8000/</code> to see the documentation locally</p> </li> <li> <p>Modify the files in the docs directory. The site will auto-update when the files are saved.</p> </li> <li> <p>Quit</p> <p>Ctrl+C to quit the local server and stop the container</p> </li> </ol>"},{"location":"mkdocs/#extension","title":"Extension","text":"<p>If your project wants to try other plugins not in the hackforla image, here's a way to extend the image on your own before asking to add it to the hackforla image.</p> The hackforla image is built from hackforla/mkdocs-docker, where the mkdocs plugins are listed in <code>pyproject.toml</code>. <ol> <li> <p>In ci.yml, add the instruction to install the extnesion</p> .github/workflows/ci.yml<pre><code>      - run: pip install \\\nmkdocs-material \\\nmkdocs-awesome-pages-plugin \\\n...\n</code></pre> </li> <li> <p>Add your own Dockerfile to install the plugin for local usage</p> Dockerfile.mkdocs<pre><code># base image\nFROM fyliu/local-mkdocs:testing\n\n# set work directory\nWORKDIR /app\n\n# install system dependencies\nRUN apt-get update \\\n&amp;&amp; apt-get --no-install-recommends install -y \\\ngit # mkdocs-multirepo-plugin requires this \\\n&amp;&amp; apt-get clean \\\n&amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# install dependencies\n# (1)!\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# copy project\nCOPY . .\n</code></pre> <ol> <li>Presumably, the extra plugins are specified in requirement.txt to be installed</li> </ol> </li> <li> <p>Modify the docker-compose file to use the new Dockerfile</p> docker-compose.mkdocs.yml<pre><code>mkdocs:\n#image: fyliu/local-mkdocs:testing\nbuild:\ncontext: .\ndockerfile: Dockerfile.mkdocs\ncontainer_name: mkdocs\n</code></pre> </li> </ol> How we set it up"},{"location":"mkdocs/#github-workflow","title":"Github workflow","text":"<p>We're using essentially the same workflow described here.</p> <p>This builds and publishes the docs on push to the main branch.</p> .github/workflow/ci.yml<pre><code>name: ci\non:\npush:\nbranches:\n- main\njobs:\ndeploy:\nruns-on: ubuntu-latest\npermissions:\ncontents: write # (1)!\nsteps:\n- uses: actions/checkout@v2\n- uses: actions/setup-python@v2\nwith:\npython-version: 3.x\n- run: pip install mkdocs-material\n- run: mkdocs gh-deploy --force\n</code></pre> <ol> <li>Request repo commit permission inside the deploy job.</li> </ol>"},{"location":"mkdocs/#docker-image","title":"Docker image","text":"<p>There's a docker image that contains the standard mkdocs setup we use at Hack for LA. It contains all the plugins that projects are using. If your project requires other ones, Either request one to be added to the image or create your own dockerfile for installing them.</p> Temporarily, the image is in a personal dockerhub repo <code>fyliu/local-mkdocs:testing</code> until it can be moved under a hackforla account. The source repo for the image is here <p>Projects can use the image by creating a docker-compose.yml file like this</p> docker-compose.mkdocs.yml<pre><code>version: \"3.9\"\nservices:\nmkdocs:\nimage: fyliu/local-mkdocs:testing\ncontainer_name: mkdocs # (1)!\ncommand: mkdocs serve -a \"0.0.0.0:8000\"\nports:\n- \"8000:8000\" # (2)!\nvolumes:\n- .:/app\n</code></pre> <ol> <li>If the name conflicts with another container, we suggest customizing this with your project name, like <code>mkdocs-engineering</code> or <code>mkdocs-website</code>.</li> <li>If port 8000 is already in use, change this to something like 8001:8000 to expose it on port 8001.</li> </ol>"},{"location":"mkdocs/#mkdocs-docker-image-repo","title":"Mkdocs docker image repo","text":""},{"location":"mkdocs/#how-to-use-it","title":"How to use it","text":"DockerLocal install (pip)Local install (poetry) How we set it up"},{"location":"mkdocs/#docker","title":"Docker","text":"<ol> <li> <p>Build the image</p> <pre><code>docker-compose build\n</code></pre> </li> <li> <p>Start the container</p> <pre><code>docker-compose up\n</code></pre> </li> <li> <p>Open a browser to <code>http://localhost:8001/</code> to see the documentation locally</p> </li> <li> <p>Modify the files in the docs directory. The site will auto update when the files are saved.</p> </li> <li> <p>Quit</p> <p>Ctrl+C to quit the local server and stop the container</p> </li> </ol>"},{"location":"mkdocs/#local-install-pip","title":"Local Install (pip)","text":"<p>python should be version 3</p> <ol> <li> <p>Install mkdocs</p> <pre><code>pip install -r requirements.txt\n</code></pre> </li> <li> <p>Start the local server</p> <pre><code>mkdocs serve -a localhost:8001\n</code></pre> </li> <li> <p>Open a browser to <code>http://localhost:8001/</code> to see the documentation locally</p> </li> <li> <p>Modify the files in the docs directory. The site will auto update when the files are saved.</p> </li> <li> <p>Quit</p> <p>Ctrl+C to quit mkdocs</p> </li> </ol>"},{"location":"mkdocs/#local-install-poetry","title":"Local Install (poetry)","text":"<p>python poetry must be installed in the local system</p> <ol> <li> <p>Install mkdocs</p> <pre><code>poetry install\n</code></pre> </li> <li> <p>Start the local server</p> <pre><code>poetry shell\nmkdocs serve -a localhost:8001\n</code></pre> </li> <li> <p>Open a browser to <code>http://localhost:8001/</code> to see the documentation locally</p> </li> <li> <p>Modify the files in the docs directory. The site will auto update when the files are saved.</p> </li> <li> <p>Quit</p> <p>Ctrl+C to quit mkdocs</p> <pre><code>exit  # (1)!\n</code></pre> <ol> <li>to close poetry shell environment</li> </ol> </li> </ol>"},{"location":"mkdocs/#setup-from-scratch","title":"Setup from scratch","text":"<p>Here's the recommended setup, from our experience setting it up.</p>"},{"location":"mkdocs/#project-directory","title":"Project directory","text":"<pre><code>mkdir mkdocs-notes &amp;&amp; cd $_\ngit init\ngit commit \u2014allow-empty -m\u201dInitial commit\u201d\n</code></pre>"},{"location":"mkdocs/#poetry-project","title":"Poetry project","text":"<pre><code>poetry init \u2014name docs \u2014description \u201cProject Documentation\u201d # (1)!\n# use a modern stable python like version 3.11.1\n# don\u2019t define dependencies interactively\ngit commit -m\u201dcreate project for documentation\u201d\n</code></pre> <ol> <li>We chose poetry because it performs multiple useful functions such as creating the virtual environment and dependency management. It will be easy to update to the latest versions of dependencies.</li> </ol>"},{"location":"mkdocs/#mkdocs-package","title":"Mkdocs package","text":"<pre><code>poetry shell # this goes into the poetry virtual environment\npoetry add mkdocs \u2014group docs\n# group replaces dev dependencies\ngit add pyproject.toml poetry.lock\ngit ci -m\u201dadd mkdocs package\u201d\n</code></pre>"},{"location":"mkdocs/#mkdocs-project","title":"Mkdocs project","text":"<pre><code>mkdocs new . # creates mkdocs project in current directory\ngit add -A # add all untracked files\ngit ci -m\u201dcreate mkdocs project\u201d\n</code></pre>"},{"location":"mkdocs/#local-dev-server","title":"Local dev server","text":"<pre><code>mkdocs serve \u2014dev-addr 0.0.0.0:8001 # (1)!\n</code></pre> <ol> <li>Start the dev server locally on any address on port 8001. This is useful for development from a different local network computer, where the default localhost won\u2019t work</li> </ol>"},{"location":"mkdocs/#material-theme","title":"Material theme","text":"<pre><code>poetry add mkdocs-material\ncat \"theme: material\" &gt;&gt; mkdocs.yml\ngit ci -a -m\"setup material theme for mkdocs\"\n</code></pre>"},{"location":"mkdocs/#multirepo-not-yet-working","title":"Multirepo (not yet working)","text":"<pre><code>poetry add mkdocs-multirepo-plugin\n# add the plugin in mkdocs.yml\n# import the other repos in mkdocs.yml\n</code></pre>"},{"location":"mkdocs/#export-requirements","title":"Export requirements","text":"<p>We need to export the requirements whenever we add a new package, so that the docker setup and pip users can know to use it.</p> <pre><code># (1)!\npoetry export -f requirements.txt --without-hashes &gt; requirements.txt --with docs\n</code></pre> <ol> <li>This is also contained in a script <code>export_requirements.sh</code> in the scripts directory</li> </ol>"},{"location":"mkdocs/#deployment-to-github-pages","title":"Deployment to Github Pages","text":"<p>We closely followed this guide. This setup creates a gh-pages branch to store the latest docs. Make the necessary configurations in the Github repo settings as necessary under Pages.</p>"},{"location":"mkdocs/#docker-setup","title":"Docker setup","text":"<p>We modified the dockerfile and docker-compose files from People Depot to install and serve mkdocs locally. The files are <code>docker-compose.yml</code> and <code>Dockerfile</code>.</p>"}]}